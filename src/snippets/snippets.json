{
    "Login Interactively": {
        "prefix": "loginInt",
        "body": "msRestAzure.interactiveLogin(function(${1:err}, ${2:credentials}) {\n\tif (err) {\n\t\tconsole.log(err);\n\t\treturn;\n\t}\n\t$0\n});",
        "description": "Interactively login to Azure account"
    },
    "Login with Service Principal": {
        "prefix": "loginSp",
        "body": "msRestAzure.loginWithServicePrincipalSecret(${1:clientId}, ${2:secret}, ${3:domain}, function(${4:err}, ${5:credentials}) {\n\tif (err) {\n\t\tconsole.log(err);\n\t\treturn;\n\t}\n\t$0\n});",
        "description": "Login with Service principal into Azure account"
    },
    "Login with Password": {
        "prefix": "loginPwd",
        "body": "msRestAzure.loginWithUsernamePassword(${1:username}, ${2:password}, function(${3:err}, ${4:credentials}) {\n\tif (err) {\n\t\tconsole.log(err);\n\t\treturn;\n\t}\n\t$0\n});",
        "description": "Login with username and password into Azure account"
    },
    "Create Service Principal": {
        "prefix": "spCreate",
        "body": ["'use strict';",
        "",
        // Documentation text @0-indent
        "// Steps:",
        "// 1. Create AD application",
        "// 2. Create SP on top of the AD application",
        "// 3. Assigning the Contributor role to the SP",
        "",
        "function createServicePrincipal() {",
        // imports @1-indent
        "\tvar msrestazure = require('ms-rest-azure');",
        "\tvar graph = require('azure-graph');",
        "\tvar authorization = require('azure-arm-authorization');",
        "\tvar util = require('util');",
        "\tvar moment = require('moment');",
        "",        
        // variable declarations @1-indent
        "\t// TODO: Initialize these variables",
        "\tvar ${0:tenantId;}",
        "\tvar ${1:subscriptionId;}",
        "\tvar ${2:passwordForSp;}",
        "\tvar ${3:displayName;}",
        "",
        "\tvar homePage = 'http://' + displayName + ':8080';",
        "\tvar identifierUris = [ homePage ];",
        "\tvar roleId = 'b24988ac-6180-42a0-ab88-20f7382dd24c'; // contributor role",
        "\tvar scope = '/subscriptions/' + subscriptionId;",
        "\tvar roleDefinitionId = scope + '/providers/Microsoft.Authorization/roleDefinitions/' + roleId;",
        "\tvar loginOptions = {",
        "\t\tdomain: tenantId",
        "\t};",
        "",
        "\tmsrestazure.interactiveLogin(loginOptions, function(err, creds) {",
        "\t\tif (err) {",
        "\t\t\tconsole.log('Error occured in interactive login: \\n' + util.inspect(err, { depth: null }));",
        "\t\t\treturn;",
        "\t\t}",
        "",
        // more variable declarations @2-indent
        "\t\tvar options = {",
        "\t\t\tdomain: tenantId,",
        "\t\t\ttokenAudience: 'graph',",
        "\t\t\tusername: creds.username,",
        "\t\t\ttokenCache: creds.tokenCache,",
        "\t\t\tenvironment: creds.environment",
        "\t\t};",
        "\t\tvar credsForGraph = new msrestazure.DeviceTokenCredentials(options);",
        "\t\tvar graphClient = new graph(credsForGraph, tenantId);",
        "\t\tvar startDate = new Date(Date.now());",
        "\t\tvar endDate = new Date(startDate.toISOString());",
        "\t\tvar m = moment(endDate);",
        "\t\tm.add(1, 'years');",
        "\t\tendDate = new Date(m.toISOString());",
        "\t\tvar applicationCreateParameters = {",
        "\t\t\tavailableToOtherTenants: false,",
        "\t\t\tdisplayName: displayName,",
        "\t\t\thomePage: homePage,",
        "\t\t\tidentifierUris: identifierUris,",
        "\t\t\tpasswordCredentials: [{",
        "\t\t\t\tstartDate: startDate,",
        "\t\t\t\tendDate: endDate,",
        "\t\t\t\tkeyId: msrestazure.generateUuid(),",
        "\t\t\t\tvalue: passwordForSp",
        "\t\t\t}]",
        "\t\t};",
        "",
        // 1. Create AD application @2-indent
        "\t\tgraphClient.applications.create(applicationCreateParameters, function (err, application, req, res) {",
        "\t\t\tif (err) {",
        "\t\t\t\tconsole.log('Error occured while creating the application: \\n' + util.inspect(err, { depth: null }));",
        "\t\t\t\treturn;",
        "\t\t\t}",
        "",
        // 2. Create SP @3-indent
        "\t\t\tvar servicePrincipalCreateParameters = {",
        "\t\t\t\tappId: application.appId,",
        "\t\t\t\taccountEnabled: true",
        "\t\t\t};",
        "",
        "\t\t\tgraphClient.servicePrincipals.create(servicePrincipalCreateParameters, function (err, sp, req, res) {",
        "\t\t\t\tif (err) {",
        "\t\t\t\t\tconsole.log('Error occured while creating the servicePrincipal: \\n' + util.inspect(err, { depth: null }));",
        "\t\t\t\t\treturn;",
        "\t\t\t\t}",
        "",
        // 3. SP role assignment @4-indent
        "\t\t\t\tvar authorizationClient = new authorization(creds, subscriptionId, null);",
        "\t\t\t\tvar assignmentGuid = msrestazure.generateUuid();",
        "\t\t\t\tvar roleCreateParams = {",
        "\t\t\t\t\tproperties: {",
        "\t\t\t\t\t\tprincipalId: sp.objectId,",
        "\t\t\t\t\t\troleDefinitionId: roleDefinitionId,",
        "\t\t\t\t\t\tscope: scope",
        "\t\t\t\t\t}",
        "\t\t\t\t};",
        "",
        "\t\t\t\tauthorizationClient.roleAssignments.create(scope, assignmentGuid, roleCreateParams, function (err, roleAssignment, req, res) {",
        "\t\t\t\t\tif (err) {",
        "\t\t\t\t\t\tconsole.log('\\nError occured while creating the roleAssignment: \\n' + util.inspect(err, { depth: null }));",
        "\t\t\t\t\t\treturn;",
        "\t\t\t\t\t}",
        "",
        // Print SP information to console
        "\t\t\t\t\tconsole.log('>>>>>>>>>>>\\nSuccessfully created the role assignment for the servicePrincipal.\\n');",
        "\t\t\t\t\tconsole.log('>>>>>>>>>>>\\nIn future for login you will need the following info:');",
        "\t\t\t\t\tconsole.log('ServicePrincipal Id (SPN):    ' + sp.appId);",
        "\t\t\t\t\tconsole.log('ServicePincipal Password:    ' + passwordForSp);",
        "\t\t\t\t\tconsole.log('Tenant Id for ServicePrincipal:    ' + tenantId);",
        "\t\t\t\t\tconsole.log('>>>>>>>>>>>\\n');",
        "\t\t\t\t});", // close sp role assignment
        "\t\t\t});", // close sp create
        "\t\t});", // close AD application create
        "\t});", // close interactive login
        "}" // close function createServicePrincipal
        ],
        "description": "Create a service principal"
    }
}
